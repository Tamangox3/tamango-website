---
import Slider from "./Slider.astro";
---

<canvas data-animation-canvas class="h-dvh w-dvw"></canvas>

<Slider min={-5} max={5} step={0.1} value={1} id="progress-bar" />

<script>
  import RuntimeLoader from "@lib/miami/rive-runtime-loader";

  import {
    type RiveCanvas as RiveCanvasType,
    type File as RiveFileType,
  } from "@rive-app/canvas-advanced";

  const isDev = import.meta.env.MODE === "development";

  const logger = {
    log: (...args: unknown[]) => {
      if (isDev) {
        console.log(...args);
      }
    },
  };

  let speed = 1;

  document.getElementById("progress-bar")?.addEventListener("input", (e) => {
    speed = parseFloat((e.target as HTMLInputElement).value);
  });

  async function init() {
    const canvas = document.querySelector(
      "[data-animation-canvas]"
    ) as HTMLCanvasElement | null;

    if (!canvas) {
      throw new Error("Canvas not found");
    }

    function computeSize() {
      canvas!.width = window.innerWidth;
      canvas!.height = window.innerHeight;
    }

    window.onresize = computeSize;
    computeSize();

    const rive = (await RuntimeLoader.awaitInstance()) as RiveCanvasType;
    let fileBytes = new Uint8Array(
      await (await fetch(new Request("/miami/miami_v3/r.riv"))).arrayBuffer()
    );
    const file = (await rive.load(new Uint8Array(fileBytes))) as RiveFileType;

    const renderer = rive.makeRenderer(canvas);

    if (isDev) rive.enableFPSCounter();

    let lastTime: number;
    const artboard = file.artboardByName(file.defaultArtboard().name);

    const stateMachine = new rive.StateMachineInstance(
      artboard.stateMachineByIndex(0),
      artboard
    );
    const idleAnimation = new rive.LinearAnimationInstance(
      artboard.animationByIndex(0),
      artboard
    );

    let triggered = false;

    canvas.addEventListener("click", () => {
      if (!triggered) {
        stateMachine.input(0).asTrigger().fire();
        triggered = true;
      }
    });

    function draw(time: number) {
      if (!lastTime) {
        lastTime = time;
      }
      const elapsedSeconds = (time - lastTime) / 1000;
      lastTime = time;

      renderer.clear();
      artboard.advance(elapsedSeconds * speed);
      stateMachine.advance(elapsedSeconds * speed);

      renderer.save();
      renderer.align(
        rive.Fit.contain,
        rive.Alignment.center,
        {
          minX: 0,
          minY: 0,
          maxX: canvas!.width,
          maxY: canvas!.height,
        },
        artboard.bounds
      );
      artboard.draw(renderer);
      renderer.restore();

      rive.requestAnimationFrame(draw);
    }

    rive.requestAnimationFrame(draw);

    return rive;
  }

  const animation = await init();
</script>
