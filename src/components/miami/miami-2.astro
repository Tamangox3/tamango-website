<div
  id="loading"
  class="fixed inset-0 z-50 items-center justify-center bg-black flex flex-col gap-[24px] transition-opacity duration-300 ease-in-out"
>
  <img src="/logo.svg" class="w-[180px]" />
  <div
    class="w-10 h-10 border-4 border-black border-t-white rounded-full animate-spin-slow"
  >
  </div>
  <span class="text-white text-2xl">L'animazione sta caricando</span>
</div>

<!-- html components -->
<canvas data-trigger data-animation-canvas class="h-dvh w-dvw"></canvas>
<!-- <div
  id="play-pause-button"
  class="fixed z-10 bottom- right-[16px] w-[200px] p-3 h-[220px] accent-white rounded-lg flex flex-col items-center space-y-2"
>
  <div
    id="play-pause-button-icon"
    class="w-10 h-10 border-4 border-black border-t-white rounded-full"
  >
    PLAY
  </div>
</div> -->
<div
  class="miami-slider fixed z-10 bottom-[48px] right-[16px] w-[200px] p-3 h-[220px] accent-white rounded-lg flex flex-col items-center space-y-2"
>
  <div class="flex flex-row items-center gap-2"></div>
  <div class="flex flex-col items-center gap-2">
    <span class="text-white text-sm">Scroll speed</span>
    <div id="scroll-velocity" class="text-white text-sm">0</div>
    <span class="text-white text-sm">Audio</span>
    <div id="audio-progress" class="text-white text-sm">00:00</div>
    <span class="text-white text-sm">Animation</span>
    <div id="frame-progress" class="text-white text-sm">00:00</div>
  </div>
</div>

<!-- script section -->

<script>
  // imports
  import RuntimeLoader from "@lib/miami/rive-runtime-loader";
  import { AudioManager } from "@lib/miami/audio";
  import {
    type RiveCanvas as RiveCanvasType,
    type File as RiveFileType,
    type FileAsset,
  } from "@rive-app/canvas-advanced";
  import type { LinearAnimationInstance } from "@rive-app/canvas/rive_advanced.mjs";
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { Observer } from "gsap/Observer";

  gsap.registerPlugin(ScrollTrigger, Observer);

  // utils
  const isDev = import.meta.env.MODE === "development";

  const logger = {
    log: (...args: unknown[]) => {
      if (isDev) {
        console.log(...args);
      }
    },
  };

  // variables

  // html elements
  const canvas = document.querySelector(
    "[data-animation-canvas]",
  ) as HTMLCanvasElement;
  const scrollVelocityEl = document.getElementById("scroll-velocity");
  const loadingDiv = document.getElementById("loading");

  // audio manager
  const audioManager = new AudioManager();
  let triggered = false;
  let isPlaying = false;

  // animation context
  let activeAnimation: LinearAnimationInstance | null = null;
  let idleAnimation: LinearAnimationInstance | null = null;

  // global speed
  let speed: number = 1;
  let lastTime: number;

  // prevent default touch move (for mobile, scroll won't refresh page)
  document.addEventListener(
    "touchmove",
    (e) => {
      e.preventDefault();
    },
    { passive: false },
  );

  function updateProgressDisplays(audioPosition: number, activeAnimation: any) {
    // Update audio progress
    const audioProgressEl = document.getElementById("audio-progress");

    if (audioProgressEl) {
      audioProgressEl.textContent = audioPosition.toFixed(2);
    }

    // Update animation progress
    const frameProgressEl = document.getElementById("frame-progress");
    if (frameProgressEl) {
      frameProgressEl.textContent = activeAnimation.time.toFixed(2);
    }
  }

  // =============== Animation Setup Functions ===============
  function setupCanvas() {
    if (!canvas) throw new Error("Canvas not found");

    function computeSize() {
      if (!canvas) return;
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    window.onresize = computeSize;
    computeSize();
  }

  async function setupRive(canvas: HTMLCanvasElement, riveBytes: Uint8Array) {
    const rive = (await RuntimeLoader.awaitInstance()) as RiveCanvasType;
    const file = (await rive.load(
      riveBytes,
      new rive.CustomFileAssetLoader({
        loadContents: (asset: FileAsset, inBandBytes: any) => {
          if (!asset.isImage) {
            // Ignore non-image assets
            return true;
          }
          fetch(
            "/miami/miami_v4/assets/" +
              asset.uniqueFilename.split(".")[0] +
              ".webp",
          ).then(async (response) => {
            asset.decode(new Uint8Array(await response.arrayBuffer()));
          });
          return true;
        },
      }),
    )) as RiveFileType;
    const renderer = rive.makeRenderer(canvas);

    if (isDev) rive.enableFPSCounter();

    return { rive, file, renderer };
  }

  function setupAnimations(rive: RiveCanvasType, file: RiveFileType) {
    const artboard = file.artboardByName(file.defaultArtboard().name);
    const stateMachine = new rive.StateMachineInstance(
      artboard.stateMachineByIndex(0),
      artboard,
    );
    idleAnimation = new rive.LinearAnimationInstance(
      artboard.animationByIndex(0),
      artboard,
    );
    activeAnimation = new rive.LinearAnimationInstance(
      artboard.animationByIndex(1),
      artboard,
    );

    return { artboard, stateMachine, idleAnimation };
  }

  function createDrawLoop(
    rive: RiveCanvasType,
    renderer: any,
    artboard: any,
    stateMachine: any,
    canvas: HTMLCanvasElement,
  ) {
    function draw(time: number) {
      if (!lastTime) lastTime = time;

      const currentAudioPosition = audioManager.getCurrentTime();

      renderer.clear();

      const elapsedSeconds = (time - lastTime) / 1000;
      lastTime = time;

      if (isPlaying || !triggered) {


        artboard.advance(elapsedSeconds * speed);
        stateMachine.advance(elapsedSeconds * speed);
        activeAnimation?.advance(elapsedSeconds * speed);
      }

      renderer.save();
      renderer.align(
        rive.Fit.contain,
        rive.Alignment.center,
        {
          minX: 0,
          minY: 0,
          maxX: canvas?.width ?? window.innerWidth,
          maxY: canvas?.height ?? window.innerHeight,
        },
        artboard.bounds,
      );
      artboard.draw(renderer);
      renderer.restore();

      if (activeAnimation) {
        updateProgressDisplays(currentAudioPosition, activeAnimation);
      }

      rive.requestAnimationFrame(draw);
    }

    return draw;
  }

  async function init(riveBytes: Uint8Array) {
    setupCanvas();

    const { rive, file, renderer } = await setupRive(canvas, riveBytes);
    const { artboard, stateMachine } = setupAnimations(rive, file);

    // play-pause button event listener
    // const playPauseButton = document.getElementById("play-pause-button-icon");
    // if (playPauseButton) {
    //   playPauseButton.addEventListener("click", () => {

    //     audioManager.playIdleTrack();
    //   });
    // }

    canvas.addEventListener("click", () => {
      logger.log(
        "status: {triggered: " +
          triggered +
          ", isPlaying: " +
          audioManager.getIsPlaying() +
          "}",
      );
      if (!triggered) {
        stateMachine.input(0).asTrigger().fire();
        triggered = true;
        isPlaying = true;
        audioManager.play(0);
        if (activeAnimation) {
          activeAnimation.time = 0;
        }
      }
    });

    const drawLoop = createDrawLoop(
      rive,
      renderer,
      artboard,
      stateMachine,
      canvas,
    );
    rive.requestAnimationFrame(drawLoop);

    return rive;
  }

  function updateSpeed(newSpeed: number) {
    // Clamp the absolute value but preserve sign
    const sign = Math.sign(newSpeed);
    const absSpeed = Math.abs(newSpeed);
    const clampedAbsSpeed = Math.max(0.1, Math.min(absSpeed, 30));
    newSpeed = sign * clampedAbsSpeed;

    // Update global speed variables
    speed = newSpeed;

    // Update slider and label
    const slider = document.getElementById("progress-bar") as HTMLInputElement;
    if (slider) slider.value = newSpeed.toString();
    const label = document.querySelector(`label[for="progress-bar"]`);
    if (label) label.textContent = `${newSpeed.toFixed(2)}x`;

    // Update velocity display
    if (scrollVelocityEl) {
      scrollVelocityEl.textContent = newSpeed.toFixed(2);
    }

    // Update audio playback
    audioManager.setPlaybackRate(newSpeed);

  }

  // need two approaches, one for mobile and one for desktop
  // for mobile higher sensitivity (divide by 15)
  // for desktop lower sensitivity (divide by 5)

  // desktop: wheel debounce (150ms)
  // mobile: release is immediate, use tween to animate back to normal speed

  gsap.utils.toArray(canvas).forEach((element) => {
    let startY: number;
    let isDragging = false;
    let velocityTween: any;
    let wheelTimeout: number | null = null; // For debouncing wheel events
    const mobileRatio = 5;
    const desktopRatio = 5;

    Observer.create({
      target: element as HTMLElement,
      type: "touch,wheel,pointer,scroll",
      onPress: (self) => {
        if (velocityTween) velocityTween.kill();
        if (wheelTimeout) clearTimeout(wheelTimeout);

        startY = self.y ?? 0;
        isDragging = true;
        logger.log("Press started at:", startY);
      },
      onDrag: (self) => {
        if (!isDragging) return;

        const currentY = self.y ?? 0;
        const deltaY = currentY - startY;
        let newSpeed = deltaY / mobileRatio;
        newSpeed = -newSpeed;
        updateSpeed(newSpeed);
        startY = currentY;
      },
      onRelease: () => {
        isDragging = false;
        logger.log("Released, current speed:", speed);
        // updateSpeed(1);
        animateToNormalSpeed();
      },
      onClick: () => {
        logger.log("Clicked");
        if (isPlaying) {
          audioManager.pause();
          isPlaying = false;
        } else {
          audioManager.play(audioManager.getBufferOffset());
          isPlaying = true;
        }
      },
      onWheel: (self) => {
        if (velocityTween) velocityTween.kill();
        if (wheelTimeout) clearTimeout(wheelTimeout);

        const newSpeed = self.deltaY / desktopRatio;
        updateSpeed(newSpeed);

        wheelTimeout = window.setTimeout(() => {
          animateToNormalSpeed();
        }, 150);
      },
    });

    function animateToNormalSpeed() {
      velocityTween = gsap.to(
        {
          speed: speed,
        },
        {
          speed: 1,
          duration: 1.5,
          ease: "power2.out",
          onUpdate: function () {
            const newSpeed = this.targets()[0].speed;
            updateSpeed(newSpeed);
          },
        },
      );
    }
  });

  async function loadAssets() {
    const [audioData, riveData] = await Promise.all([
      fetch("/miami/audio/audio_seq_started.mp3").then((res) =>
        res.arrayBuffer(),
      ),
      fetch("/miami/miami_v4/r.riv").then((res) => res.arrayBuffer()),
    ]);

    return {
      audioData,
      riveData: new Uint8Array(riveData),
    };
  }

  // Hide the loading div
  setTimeout(() => {
    loadingDiv?.style.setProperty("opacity", "0");
    setTimeout(() => {
      loadingDiv?.style.setProperty("display", "none");
    }, 300);
  }, 500);

  const { audioData, riveData } = await loadAssets();
  await audioManager.loadAudio("/miami/audio/audio_seq_started.mp3");
  await init(riveData);



  // if playing, check for drifts every 4 seconds
  setInterval(() => {
    if (isPlaying) {
      console.log("Checking for drifts");
      const animationTime = activeAnimation?.time || 0;
      const audioTime = audioManager.getCurrentTime();
      const drift = Math.abs(animationTime - audioTime);

      if (drift > 0.1) { // Threshold of 100ms drift
        logger.log(`Drift detected: ${drift.toFixed(3)}s`);
        // Adjust animation time to match audio
        if (activeAnimation) {
          activeAnimation.time = audioTime;
        }
      }
    }
  }, 4000);


</script>

<style>
  #speed-minus-one,
  #speed-one,
  #speed-two {
    background-color: #3b82f6;
    color: white;
    padding: 0.25rem 0.5rem;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    font-weight: bold;
  }

  #speed-minus-one:hover,
  #speed-one:hover,
  #speed-two:hover {
    background-color: #2563eb;
  }
</style>
