<div
  data-lottie-container
  class="max-w-[768px] overflow-y-scroll h-dvh relative mx-auto"
>
  <div
    lottie-animation
    class="sticky top-0 left-0 right-0 h-dvh overflow-hidden"
  >
  </div>
  <div id="spacer" class="h-[1800px]"></div>
  <button id="playButton" class="rounded-button">Play</button>
  <button id="pauseButton" class="sticky top-4 right-4">Pause</button>
  <slot />
</div>

<script>
  import lottie from "lottie-web";
  import { Howl } from "howler";

  declare global {
    interface Window {
      scrollTimeout?: NodeJS.Timeout;
    }
  }

  const element = document.querySelector("[lottie-animation]");

  if (element instanceof HTMLElement) {
    const animation = lottie.loadAnimation({
      container: element,
      renderer: "svg",
      loop: true,
      autoplay: false,
      path: "/miami/lottie-audio.json",
      assetsPath: "/miami/images/",
    });

    // Initialize audio
    const sound = new Howl({
      src: ["/miami/traccia.mp3"],
      html5: true,
      preload: true,
      onload: () => {
        const durationInSeconds = sound.duration();
        const pixelsPerSecond = 100;
        const spacer = document.getElementById("spacer");
        if (spacer) {
          spacer.style.height = `${durationInSeconds * pixelsPerSecond}px`;
        }
      },
    });

    const playButton = document.getElementById("playButton");
    const pauseButton = document.getElementById("pauseButton");
    const container = document.querySelector("[data-lottie-container]");

    if (playButton && pauseButton && container) {
      let lastScrollTop = 0;
      let lastScrollTime = Date.now();
      let scrollVelocity = 0;

      playButton.addEventListener("click", () => {
        sound.play();
        animation.play();
        playButton.style.display = "none";
      });

      pauseButton.addEventListener("click", () => {
        sound.pause();
        animation.pause();
        playButton.style.display = "block";
      });

      container.addEventListener("scroll", () => {
        if (!sound.playing()) return;

        const currentTime = Date.now();
        const scrollTop = container.scrollTop;
        const timeDelta = currentTime - lastScrollTime;

        // Calculate scroll velocity (pixels per millisecond)
        scrollVelocity = Math.abs(scrollTop - lastScrollTop) / timeDelta;

        // Convert velocity to playback rate (adjust these values as needed)
        const minRate = 0.5; // Minimum playback rate
        const maxRate = 2.0; // Maximum playback rate
        const baseRate = 1.0; // Normal playback rate

        // Calculate new playback rate based on scroll velocity
        let newRate = baseRate + scrollVelocity * 10; // Adjust multiplier as needed
        newRate = Math.max(minRate, Math.min(maxRate, newRate));

        // Apply the new playback rate to both audio and animation
        sound.rate(newRate);
        animation.setSpeed(newRate);

        // Update progress based on scroll position
        const scrollHeight = container.scrollHeight - container.clientHeight;
        const progress = scrollTop / scrollHeight;
        const newTime = sound.duration() * progress;
        sound.seek(newTime);
        animation.goToAndStop(animation.totalFrames * progress, true);

        // Store values for next calculation
        lastScrollTop = scrollTop;
        lastScrollTime = currentTime;

        // Reset playback rate after a delay if no scrolling
        clearTimeout(window.scrollTimeout);
        window.scrollTimeout = setTimeout(() => {
          sound.rate(1.0);
          animation.setSpeed(1.0);
        }, 150);
      });

      // Sync animation with audio progress during normal playback
      sound.on("play", () => {
        requestAnimationFrame(function updateAnimation() {
          if (sound.playing()) {
            const progress = sound.seek() / sound.duration();
            animation.goToAndStop(animation.totalFrames * progress, true);
            requestAnimationFrame(updateAnimation);
          }
        });
      });
    }
  }
</script>

<style>
  .rounded-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    background-color: rgba(255, 0, 0, 0.8);
    border: none;
    padding: 10px 20px;
    border-radius: 50px;
    cursor: pointer;
  }

  #pauseButton {
    position: absolute;
    top: 10px;
    right: 10px;
    z-index: 10;
    background-color: rgba(0, 0, 255, 0.8);
    border: none;
    padding: 10px 20px;
    cursor: pointer;
  }
</style>
